""" Bookbub takehome
Kaitlyn Keil
Imports the given json file, reads it, and returns an analysis of
the books within based on the description and keywords found therein. """

import json
import csv
import sys

def file_reader(book_filename, csv_filename):
	""" Given the filename of a json containing
	the book title and description, returns
	a list of dictionaries, one dictionary per
	book.
	Takes:
		book_filename: string of the json file
		csv_filename: string of the csv file

	Teturns:
		tuple of:
		list of dictionaries. each dictionary has
		 keys 'title' and 'description'
		dictionary with keys of (keyword, genre). dictionary maps to
		 points
	"""
	keyword_dict = {}

	with open(book_filename) as book_data:
		# makes the list of dictionary entries
		books = json.load(book_data)

	with open(csv_filename) as keyword_data:
		reader = csv.reader(keyword_data)
		next(reader, None) # skips the header
		for row in reader:
			# puts the keywords into a dictionary with the format
			#  (keyword, genre)->points
			keyword_dict[(row[1].strip(),row[0].strip())] = int(row[2])
			
	return books, keyword_dict

def analyze_books(book_list, keyword_dict):
	""" Given the list of book dictionaries and the keyword dictionary,
	prints off the 3 top score genres and their scores as requested.
	Takes:
		book_list: list of dictionaries, each with the format
			{'title':<string>, 'description':<string>} 
		keyword_dict: dictionary with format of {(keyword, genre):points},
			as generated by file_reader.
	"""
	for book in book_list: # Loops through every title/description dictionary in the list
		keyword_counter = {} # initialize a counter for the keywords as a dictionary
		description = book['description']
		for character in "'?.,!()-": # removes junk characters from the list to improve searchability
			description = description.replace(character, ' ').lower()
		for keyword, genre in keyword_dict: # will trigger multiple times if the same keyword is cross-genre.
			keyword_counter[keyword] = 0 # Make sure you are not double-counting values
			word_len = len(keyword)
			index = 0
			while index != -1: # Only search until you hit the end without finding anything
				index = description.find(keyword, index) # Find where the next place it appears is
				if index != -1: # If it appears in the description, increment the counter 
					keyword_counter[keyword] += 1
					index += word_len # make sure to start searching after the phrase appeared

		# print out each book and score in requested format
		print_formatter(book['title'], score_calculator(keyword_counter, keyword_dict))

def tuple_adder(tuple1, tuple2):
	""" Given a tuple of 3 values, added the desired values to the 3 places """
	return (tuple1[0]+tuple2[0],tuple1[1]+tuple2[1],tuple1[2]+tuple2[2])

def score_calculator(keyword_counter, keyword_dict):
	""" Given the counter for a particular book description
	and the keyword dict, calculates a book's score for
	each genre, as requested by the challenge.
	Takes:
		keyword_counter: dictionary of {keyword: count}, as generated by analyze_books
		keyword_dict: dictionary with format of {(keyword, genre):points},
			as generated by file_reader.
	
	Returns:
		score_dict: dictionary with the form {genre: score}
	"""
	genre_dict = {} # each genre points to a tuple of 3 values: sum of points per word, num keywords, and total number of words that appeared
	for keyword, genre in keyword_dict:
		if keyword_counter[keyword] != 0: # does not process words where the score was 0
			word_points = keyword_dict[(keyword, genre)]
			num_times_used = keyword_counter[keyword]
			add_values = (word_points, 1, num_times_used)
			# Either adds the new values to those already in the dictionary or starts a new entry
			genre_dict[genre] = tuple_adder(genre_dict.get(genre, (0,0,0)), add_values)

	score_dict = {}
	for genre in genre_dict:
		# Goes through each genre, finds the point-per-word, and calculates total points
		scores = genre_dict[genre]
		score_dict[genre] = (scores[0]/scores[1]) * scores[2]

	return score_dict

def print_formatter(title, score_dict):
	""" Prints out a book's title, followed by top three 
	genres for that book. 
	Takes:
		title: string of book title
		score_dict: dictionary with the form {genre: score}, 
			as generated by score_calculator
	"""
	sorted_scores = sorted(score_dict.items(), key=lambda x:-x[1])[:3]
	print(title)
	for score in sorted_scores:
		print(score[0] + ',', score[1])
	print('')

if __name__ == "__main__":
	""" When called on command line, reads the files provided. """
	script = sys.argv[0]
	json_filename = sys.argv[1]
	csv_filename = sys.argv[2]

	books, keyword_dict = file_reader(json_filename, csv_filename)
	analyze_books(books, keyword_dict)